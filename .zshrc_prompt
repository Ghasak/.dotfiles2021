# =============================================================================
#
# ▒█▀▀▀█ ▒█▀▀▀█ ▒█░▒█ ▒█▀▀█ ▒█▀▀█       ░░ ▒█▀▀█ █▀▀█ █▀▀█ █▀▄▀█ █▀▀█ █▀▀█ ▀▀█▀▀
# ░▄▄▄▀▀ ░▀▀▀▄▄ ▒█▀▀█ ▒█▄▄▀ ▒█    ░░░   ▀▀ ▒█▄▄█ █▄▄▀ █░░█ █░▀░█ █░░█ █░░█ ░░█░░
# ▒█▄▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█░▒█ ▒█▄▄█       ░░ ▒█░░░ ▀░▀▀ ▀▀▀▀ ▀░░░▀ █▀▀▀ ▀▀▀▀ ░░▀░░
# =============================================================================
#
# - [] How man files have been added since you start committing (github)
autoload -U colors && colors
autoload -Uz vcs_info
#precmd() { vcs_info }
# - [] Adding douple sandwich layer while enter and exit a repo -> -<>- <- regular dir / repo dir.
#https://www.nerdfonts.com/cheat-sheet
OS_ICON=
OS_ICON=$'\uf179'
MAC_ICON=$'\uf6c3'
#DIR_ICON=
#MAC_FINDER_ICON=$'\uf535'
MAC_FINDER_ICON=$'\uff115'
CLOCK_ICON=$'\uf64f'
AT_SYMPOLE=$'\uf1fa'
ROBIN_HOOD_ICON=$'\uf2ae'
SINGEL_GEAR_ICON=$'\uf013'
IRON_MAN_ICON=$'\uf1d1'
REACT_ICON=$'\ue7ba'
ELECTRON_ICON=$'\ue62e'
CONNECTION_ICON=$'\uf20e'
REFRESH_ICON=$'\u'
APPLE_KEYBOARD=$'\ufb32'
CAMPASS_ICON=$'\uf68b'
CAMPASS_ICON2=$'\uf14e'
GOOGLE_ICON=$'\uf7ac'
ERRORCAST_ICON=$'\uf2da'
H_ICOND=$'\uf0fd'
H_ICOND2=$'\uf1dc'
SYNC_ICON=$'\uf46a'
GEAR_ICON=$'\uf085'
GIT_ICON=$'\uf7a3'
GIT_ICON2=$'\uf7a1'
HOUR_GLASS_ICON=$'\uf251'
GIT_BRANCH_ICON=$'\ue725'
RADIOACTIVE_ICON=$'\ue238'
ATOM_ICON=$'\ufc66'
SERVER_ICON2=$'\uf6d5'
#GEAR_ICON=kk
#
Date_ICON=$'\uF073'
git_ICON=
Netreno_ICON=
DESKTOP_TOWER_ICON=$'\uf6c4'
SERVER_ICON=$'\u'
GO_BACK_ARROWS_ICON=$'\u2B82'

MULTILINE_FIRST_PROMPT_PREFIX=$'\u256D\U2500'   # ╭─
MULTILINE_NEWLINE_PROMPT_PREFIX=$'\u251C\U2500' # ├─
MULTILINE_LAST_PROMPT_PREFIX=$'\u2570\U2500 '   # ╰─
RULER_CHAR=$'\u2500'                            #  ─
CARRIAGE_RETURN_ICON=$'\u21B5'                  # ↵
PROXY_ICON=$'\u2194'                            # ↔
VCS_REMOTE_BRANCH_ICON=$'\u2192'                # →
DIRENV_ICON=$'\u25BC'                           # ▼
ETC_ICON=$'\u2699'                              # ⚙
VCS_UNSTAGED_ICON=$'\u25CF'                     # ●
VCS_STASH_ICON=$'\u235F'                        # ⍟
VCS_INCOMING_CHANGES_ICON=$'\u2193'             # ↓
VCS_OUTGOING_CHANGES_ICON=$'\u2191'             # ↑
VCS_REMOTE_BRANCH_ICON=$'\u2192'                # →
VCS_BOOKMARK_ICON=$'\u263F'                     # ☿
LEFT_SEGMENT_SEPARATOR=$'\u2B80'                # ⮀
RIGHT_SEGMENT_SEPARATOR=$'\u2B82'               # ⮂
MEMEORY=$'\uf85a'
GIT_BRANCH_ICON=$'\ue0a0' #  => \uf418

# =============================================================================
# Load version control information
# Set up the prompt (with git branch name)
setopt PROMPT_SUBST
#PROMPT='%n in ${PWD/#$HOME/~} ${} > '
#PROMPT='%n in ${PWD/#$HOME/~} ${} > '
######
# Using A Splash of Colors
######
#use extended color palette if available
if [[ $terminfo[colors] -ge 256 ]]; then
    turquoise="%F{81}"
    orange="%F{166}"
    purple="%F{135}"
    hotpink="%F{161}"
    limegreen="%F{118}"
else
    turquoise="%F{cyan}"
    orange="%F{yellow}"
    purple="%F{magenta}"
    hotpink="%F{red}"
    limegreen="%F{green}"
fi

COLOR_ARRY=(red blue yellow green)
RANDOM_COLOR=$((1 + RANDOM % ${#COLOR_ARRY[@]}))
SELECTED_COLOR=$(echo "${COLOR_ARRY[$RANDOM_COLOR]}")
#SELECTED_DICE=$(echo ${DICE_ARRAY[RANDOM_DICE]})
######
ZSH_THEME_GIT_PROMPT_PREFIX="$FG[075]($FG[078]"
ZSH_THEME_GIT_PROMPT_CLEAN=""
#ZSH_THEME_GIT_PROMPT_DIRTY="$my_orange*%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="$FG[075])%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_ADDED="%{$fg[cyan]%} ✈"
ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg[yellow]%} ✭"
ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[red]%} ✗"
ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg[blue]%} ➦"
ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[magenta]%} ✂"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[grey]%} ✱"
#adding here some

#PROMPT='%{$fg[$NCOLOR]%}%c ➤ %{$reset_color%}'
# Adding color to my zsh
#PS1+="%{$fg[red]%}%n%{$reset_color%} at %{$fg[blue]%}%m %F{226}%~%f  %{$reset_color%}% "
# =============================================================================
# Customization of the Git in the righ prompt
# Format the vcs_info_msg_0_ variable
#zstyle ':vcs_info:git:*' formats "%B%F{#9370DB} => ${GIT_ICON} branch:%B%F{#E066FF}[${GIT_BRANCH_ICON} %b] "
#zstyle ':vcs_info:git:*' formats"%B %u %c ${GIT_ICON}branch:%B[${GIT_BRANCH_ICON} %b] "
#RPROMPT='%{$fg[$NCOLOR]%} $(git_prompt_info)%{$reset_color%}'

# Customization of the Git in the righ prompt
#PS1+=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f${AT_SYMPOLE} ${MAC_ICON}  %F{226}%m%  on %F{30}%~%f %F{208}${FOLDER_ICON} %{$reset_color%} '
#$(git_prompt_behind)${git_prompt_info}'
#
# =============================================================================
#

# =============================================================================
#                     Inside or outside a repo
# =============================================================================
# FOLDER_ICON=$'\uf07c'
# GIT_DIR=$'\uf408'
# #SERVER_HUB_ICONT=''
# function prompt_char {
#   git branch >/dev/null 2>/dev/null && echo "%F{yellow}$GIT_DIR  ± %{$reset_color%}" && return
#     hg root >/dev/null 2>/dev/null && echo "$FOLDER_ICON ☿" && return
#     echo "○  %F{208}${FOLDER_ICON} %{$reset_color%} "
# }
#
# # =============================================================================
# #
# # =============================================================================
#
# # =============================================================================
#
# #PS1=$'\n'
# #PS1+=$'%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f${AT_SYMPOLE} ${MAC_ICON}  %F{226}%m%  on %F{30}%~%f $(prompt_char) ${BATTARY_VARIABLE} '
# #PS1+=$'\n%F{blue}\u2570\U2500%F{blue}\u2192%{$reset_color%} '
#
# #RPROMPT=$'%F{$SELECTED_COLOR}${SELECTED_DICE} %{$reset_color%} $(git_time_since_commit)$(check_git_prompt_info) %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON}  %D{%b %d, %Y} - ${CLOCK_ICON}  %T]%{$reset_color%}'
# # =============================================================================
# #                   Dont change anything under this
# # =============================================================================
# #PROMPT='%{$fg[blue]%}%n%{$reset_color%} on %{$fg[red]%}%M%{$reset_color%} in %{$fg[blue]%}%~%b%{$reset_color%}$(git_time_since_commit)$(check_git_prompt_info)
#$ '
# ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[white]%}"
# ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%})"
# # Text to display if the branch is dirty
# ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}*%{$reset_color%}"
# # Text to display if the branch is clean
# ZSH_THEME_GIT_PROMPT_CLEAN=""
# # Colors vary depending on time lapsed.
# ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT="%{$fg[green]%}"
# ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM="%{$fg[yellow]%}"
# ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG="%{$fg[red]%}"
# ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL="%{$fg[cyan]%}"
#
# # Modify Git prompt
# ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[green]%}"
# ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
# ZSH_THEME_GIT_PROMPT_DIRTY=""
# ZSH_THEME_GIT_PROMPT_CLEAN=""
#
# ZSH_THEME_GIT_PROMPT_ADDED="%{$fg[green]%} ✚"
# ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg[blue]%} ✹"
# ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[red]%} ✖"
# ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg[magenta]%} ➜"
# ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[yellow]%} ═"
# ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[cyan]%} ✭"

# Git sometimes goes into a detached head state. git_prompt_info doesn't
# return anything in this case. So wrap it in another function and check
# for an empty string.
function check_git_prompt_info() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        if [[ -z $(git_prompt_info) ]]; then
            echo "%{$fg[magenta]%}detached-head%{$reset_color%})"
        else
            #echo "\ue725 $(git_prompt_info)"
            #echo "\ue725 $(git_prompt_info)" | awk '{print $2}' | awk -F ':' '{print $2}'
            # This variable will bring us (main*)
            #temp_var=$(echo $(git_prompt_info) | awk -F ':' '{print $2}')
            # This variable will bring us (main with uni-code of git commit icon [\uf417])
            temp_var=$(echo $(git_prompt_info) | awk '{print $1}' | awk -F ':' '{print $2}' | sed $'s/*/ \uf417 /g')
            #echo $(git_prompt_info) | awk '{print $1}' | awk -F ':' '{print $2}' | lolcat
            echo "%F{blue}\ue725 %{$fg[cyan]%}$temp_var%{$reset_color%}"
        fi
    fi
}

# Determine if we are using a gemset.
function rvm_gemset() {
    if hash rvm 2>/dev/null; then
        GEMSET=$(rvm gemset list | grep '=>' | cut -b4-)
        if [[ -n $GEMSET ]]; then
            echo "%{$fg[yellow]%}$GEMSET%{$reset_color%}|"
        fi
    fi
}

# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
function git_time_since_commit() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        # Only proceed if there is actually a commit.
        if [[ $(git log 2>&1 >/dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
            # Get the last commit.
            last_commit=$(git log --pretty=format:'%at' -1 2>/dev/null)
            now=$(date +%s)
            seconds_since_last_commit=$((now - last_commit))

            # Totals
            MINUTES=$((seconds_since_last_commit / 60))
            HOURS=$((seconds_since_last_commit / 3600))

            # Sub-hours and sub-minutes
            DAYS=$((seconds_since_last_commit / 86400))
            SUB_HOURS=$((HOURS % 24))
            SUB_MINUTES=$((MINUTES % 60))

            if [[ -n $(git status -s 2>/dev/null) ]]; then
                if [ "$MINUTES" -gt 30 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
                elif [ "$MINUTES" -gt 10 ]; then
                    COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
                else
                    COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
                fi
            else
                COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            fi

            if [ "$HOURS" -gt 24 ]; then
                echo "($(rvm_gemset)$COLOR${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m%{$reset_color%}|"
            elif [ "$MINUTES" -gt 60 ]; then
                echo "($(rvm_gemset)$COLOR${HOURS}h${SUB_MINUTES}m%{$reset_color%}|"
            else
                echo "($(rvm_gemset)$COLOR${MINUTES}m%{$reset_color%}|"
            fi
        else
            COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
            echo "($(rvm_gemset)$COLOR~| "
        fi
    fi
}

#secs_to_human() {
#    if [[ -z ${1} || ${1} -lt 60 ]] ;then
#        min=0 ; secs="${1}"
#    else
#        time_mins=$(echo "scale=2; ${1}/60" | bc)
#        min=$(echo ${time_mins} | cut -d'.' -f1)
#        secs="0.$(echo ${time_mins} | cut -d'.' -f2)"
#        secs=$(echo ${secs}*60|bc|awk '{print int($1+0.5)}')
#    fi
#    echo "Time Elapsed : ${min} minutes and ${secs} seconds."
#}

# =============================================================================
# Time at the session started
# =============================================================================
#typeset -g date1=$(date +"%s")

# =============================================================================
# =============================================================================
#CHECKER=$(if [ $? = "0" ]; then echo ""; else echo "\u263F"; fi)
# =============================================================================
# =============================================================================
#RANDOM_DICE=$((1 + RANDOM % 6));
#SELECTED_DICE=$(echo ${DICE_ARRAY[RANDOM_DICE]})
#RPROMPT='[%D{%L:%M:%S %p}]'
#typeset -g date2=$(date +"%s")
#typeset -g DIFF=$(($date2-$date1))
#typeset -g ELLAPS_TIME=$(echo "%F{150}\ufa1a$(($DIFF / 3600 ))h:$((($DIFF % 3600) / 60))m:$(($DIFF % 60))s %{$reset_color%}")

# =============================================================================
# =============================================================================
#TMOUT=1
#TRAPALRM() {
#  zle reset-prompt
#  }
# =============================================================================
#parse_git_branch() {
#  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
#}
#print_epoch() { date  '+%s' }
#print_epoch() { date  '+%s' }

#setopt PROMPT_SUBST
#autoload -U colors && colors
#export PROMPT='%n %~ %F{blue}🌿$(parse_git_branch)%f > '

# =============================================================================
#                       Checking directry and flip the icon
# =============================================================================
function Iam_at_home() {
    local temp_var=$(echo $(git branch 2>/dev/null)) # Send the error message to not be printed.

    if [ "$PWD" = "$HOME" ]; then
        local MYDIR='\uf015'
        echo $MYDIR
    elif [ "$PWD" = "$HOME/Desktop" ]; then
        local MYDIR='\uf498'
        echo $MYDIR
        #  elif [ -z $(git branch >/dev/null 2>/dev/null) ]; then
    elif [ ! -z "${temp_var}" ]; then
        local MYDIR='\uf1d3' #'\uf408' #'\ue5fb' #\uf1d3
        echo $MYDIR
    else
        local MYDIR='\uf115'
        echo $MYDIR
    fi

    unset MYDIR
}

# =============================================================================
#                       ELLAPS_TIME FUNCTION
#               Calculate the time between two prompt (hitting inter)
#                   Main precmd function with first arg.
# =============================================================================
zmodload zsh/datetime

prompt_preexec() {
    prompt_prexec_realtime=${EPOCHREALTIME}
}

prompt_precmd() {
    if ((prompt_prexec_realtime)); then
        local -rF elapsed_realtime=$((EPOCHREALTIME - prompt_prexec_realtime))
        local -rF s=$((elapsed_realtime % 60))
        local -ri elapsed_s=${elapsed_realtime}
        local -ri m=$(((elapsed_s / 60) % 60))
        local -ri h=$((elapsed_s / 3600))
        if ((h > 0)); then
            printf -v prompt_elapsed_time '%ih%im' ${h} ${m}
        elif ((m > 0)); then
            printf -v prompt_elapsed_time '%im%is' ${m} ${s}
        elif ((s >= 10)); then
            printf -v prompt_elapsed_time '%.2fs' ${s} # 12.34s
        elif ((s >= 1)); then
            printf -v prompt_elapsed_time '%.3fs' ${s} # 1.234s
        else
            printf -v prompt_elapsed_time '%ims' $((s * 1000))
        fi
        unset prompt_prexec_realtime
    else
        # Clear previous result when hitting ENTER with no command to execute
        unset prompt_elapsed_time
    fi
}

setopt nopromptbang prompt{cr,percent,sp,subst}

autoload -Uz add-zsh-hook
add-zsh-hook preexec prompt_preexec
add-zsh-hook precmd prompt_precmd

#RPS1='%F{cyan}${prompt_elapsed_time}%F{none}'

# =============================================================================

function dice() {
    DICE_ARRAY[1]=$'\uf6c9'
    DICE_ARRAY[2]=$'\uf6ca'
    DICE_ARRAY[3]=$'\uf6cb'
    DICE_ARRAY[4]=$'\uf6cc'
    DICE_ARRAY[5]=$'\uf6cd'
    DICE_ARRAY[6]=$'\uf6ce'

    nb=$(($RANDOM % 6 + 1))
    #RPROMPT="${DICE_ARRAY[$nb]}";
    TEMP_DIC="${DICE_ARRAY[$nb]}"
    psvar[1]=${TEMP_DIC}

}
# =============================================================================
# We adding here the zsh hook that specified as function type, we can pass variables using %v, if you want to use other variable use %2v %3v
# See more here: https://stackoverflow.com/questions/36192523/zsh-prompt-customization
autoload -Uz add-zsh-hook
add-zsh-hook precmd dice
#setopt promptsubst
#PROMPT=$'\n'
#PROMPT=$'\n%F{%(0?.green.red)} $(Iam_at_home) $(running_docker)%f'
#PROMPT+=$'\n => '
#RPROMPT=$'%F{cyan}\ufa1a${prompt_elapsed_time} %F{16}$(date "+%F %T %z")%F{none} %v'
# =============================================================================
#                      Battery checking status
# =============================================================================
function battary_charge_percentage() {
    if [ -f ~/.GScript/.batcharge.py ]; then
        BATTARY_STATUS=$(echo "$(~/.GScript/.batcharge.py)" | awk '{print $1}')
        BATTARY_PERCENTAGE=$(echo "$(~/.GScript/.batcharge.py)" | awk '{print $2 $3}')
        #BATTARY_VARIABLE=$(echo "%F{#9370DB}$(~/.GScript/.batcharge.py)% %{$reset_color%}")
        BATTARY_VARIABLE=$(echo "%F{#9370DB}$BATTARY_STATUS %{$reset_color%}%F{red}  $BATTARY_PERCENTAGE %% %{$reset_color%}")

        #psvar[2]=$(echo "${BATTARY_VARIABLE}")
        # psvar[2]=$(echo "$BATTARY_STATUS")
        # psvar[3]=$(echo "$BATTARY_PERCENTAGE")
        echo "${BATTARY_VARIABLE}"
    else
        BATTARY_VARIABLE=""
        # psvar[2]=$(echo "${BATTARY_VARIABLE}")
    fi
}

#autoload -Uz add-zsh-hook
#add-zsh-hook precmd battary_charge_percentage

# =============================================================================
#                       GIT SUPER STATUS (FAST)
# =============================================================================
#
PATH=$PATH:/$HOME/zsh-git-prompt/src/.bin
GIT_PROMPT_EXECUTABLE="haskell"
source /Users/ghasak.ibrahim/zsh-git-prompt/zshrc.sh
function Modified_git_status() {
    temp_var1=$(echo $(git_super_status) | awk -F ':' '{print $2}')
    echo "$temp_var1"
}

# =============================================================================
#                       DOCKER CONTAINER FUNCTION
#               Check the docker containers if they are running
# =============================================================================

function running_docker() {
    local temp_var=$(echo $(docker container ps -a -q))
    local temp_current_running_container_name=$(echo $(docker ps --format '{{.Names}}'))

    if [ -z "${temp_var}" ]; then
        psvar[4]=""
    else
        How_many_containers=$(echo $(docker ps -q | wc -l))
        if [ $How_many_containers != 0 ]; then
            local CONTAINER_IS_RUNNING=$(for ((i = 0; i < $How_many_containers; i++)); do echo -n '\ue7b0  '; done | awk -F '$' '{print $1}')
        else
            local CONTAINER_IS_RUNNING=""
        fi
        #local CONTAINER_IS_RUNNING=$(echo $(repeatChar '\ue7b0' $How_many_containers))
        #echo $CONTAINER_IS_RUNNING
        #echo "$CONTAINER_IS_RUNNING (${temp_current_running_container_name})"
        #psvar[4]=$(echo "$CONTAINER_IS_RUNNING")
        echo "${CONTAINER_IS_RUNNING}"
    fi
}

#autoload -Uz add-zsh-hook
#add-zsh-hook precmd running_docker
#add-zsh-hook preexec running_docker
# =============================================================================
#                       CPU USAGE
# =============================================================================
function CPU_USAGE() {
    MAX_CPU_USAGE=$(ps aux | head | sort -nrk3,3 | awk '{print $3,$11}' | head -n1 | awk '{print $1}')
    CPU_JOB_NAME=$(ps aux | head | sort -nrk3,3 | awk '{print $3,$11}' | head -n1 | awk '{print $2}')
    #psvar[5]=$(echo "$MAX_CPU_USAGE")
    #psvar[6]=$(echo "${CPU_JOB_NAME##*/}") # Getting  the last part of a directory using (##*/)
    echo " ${MAX_CPU_USAGE}%% \uf423  ${CPU_JOB_NAME##*/}"

}
#autoload -Uz add-zsh-hook
#add-zsh-hook precmd  CPU_USAGE
# =============================================================================
#                            Memory usage
# =============================================================================
function memory_uasge() {
    temp_var=$(echo $(ps -caxm -orss= | awk '{ sum += $1 } END { print "" sum/(1024 * 1000)}'))
    echo "$temp_var/32.0GB"
}

# =============================================================================
#                           Virtual Env status
# =============================================================================
# colorscheme: https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo -e "\033[37m"'\ufbf2  ''('`basename $VIRTUAL_ENV`') '
}
# \ufbf2 => ﯲ
# \uf233 =>

#  RED="\e[31m"
#       echo -n -e  "=> ${LIGHT_YELLOW}\uf128  ${ENDCOLOR} "  && echo  "${file}"
# =============================================================================
#                            Configruations
#                   zsh-bar of the right/left prompt
# =============================================================================
#
#\u2570
# PROMPT=$'\n'
#PROMPT=$'\n%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE}  ${MAC_ICON}  %F{226}%m%  on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf11e.\uf071)  $(Iam_at_home)  '
PROMPT=$'\n%F{blue}\u256D\U2500${OS_ICON} %F{208}%n%f ${AT_SYMPOLE}  ${MAC_ICON}  %F{226}%m%  on %F{30}%~%f%F{%(0?.green.red)} %(0?.\uf08b.\uf071)  %F{140}$(Iam_at_home)  '
#PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}%f%F{120}%F{180}\uf9c4 %F{white}% \u2B82 $(CPU_USAGE) %F{red}${MEMEORY} %F{cyan}$(memory_uasge) %F{blue}\ufa1a${prompt_elapsed_time} %F{yellow}%1v%{$reset_color%} $(git_time_since_commit)$(Modified_git_status) '
#PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}%4v%f%F{120} %2v%F{180} %3v \uf0e4 %F{white} %5v %% \u2B82  %6v'
ColoredIcon=$'\u'
#PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7%4v%f%F{120}%F{180}%F{blue}%{$reset_color%}  %F{yellow}%1v  $(git_time_since_commit)$(Modified_git_status) %F{blue}\ufa81 %F{yellow}\ufa81 %F{red}\ufa81 %F{blue}\ufa81 %F{yellow}\ufa81 %F{red}\ufa81%{$reset_color%}'
PS1+=$'\n%F{blue}${MULTILINE_NEWLINE_PROMPT_PREFIX}\ufba7%4v%f%F{120}%F{180}%F{blue}%{$reset_color%}  %F{yellow}%1v%{$reset_color%}  $(git_time_since_commit)$(Modified_git_status)%{$reset_color%} $(virtualenv_info)'
#S1+=$'\n%F{blue}\u2570\U2500%F{blue}\uf553%{$reset_color%} '  #
#PS1+=$'\n%F{blue}\u2570\uf553%F{blue}%{$reset_color%}  '  #
#PS1+=$'\n%F{blue}\u2570\ufa21\uf93d%F{blue}%{$reset_color%} '  #
PS1+=$'\n%F{blue}\u2570\uf93d\ufa21\uf7c6%F{blue}%{$reset_color%}  ' #
#PS1+=$'\n%F{blue}\u2570\U2500%F{blue}\uf1ce%{$reset_color%}  '
#RPROMPT=$'%F{blue}\ufa1a${prompt_elapsed_time} %F{yellow}%1v%{$reset_color%} $(git_time_since_commit)$(Modified_git_status) %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON}  %D{%b %d, %Y}- ${CLOCK_ICON}  %D{%L:%M:%S %p}]%{$reset_color%}'
RPROMPT=$'%F{blue}\ufa1a:${prompt_elapsed_time} %F{yellow}${SYNC_ICON}%{$reset_color%} %{$fg[magenta]%}[ ${Date_ICON}  %D{%b %d, %Y}- ${CLOCK_ICON}  %D{%L:%M:%S %p}]%{$reset_color%}'

# =============================================================================
#    Reference: https://blog.carbonfive.com/writing-zsh-themes-a-quickref/
# =============================================================================
